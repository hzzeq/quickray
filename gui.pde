/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void window_options_draw(PApplet appc, GWinData data) { //_CODE_:window_options:211708:
  appc.background(230);
} //_CODE_:window_options:211708:

public void button_render_click(GButton source, GEvent event) { //_CODE_:button_render:678444:
  // Move draw() code here
} //_CODE_:button_render:678444:

public void button_export_click(GButton source, GEvent event) { //_CODE_:button_export:630573:
  selectOutput("Export image as...", "saveAsImage");
} //_CODE_:button_export:630573:

public void button_save_click(GButton source, GEvent event) { //_CODE_:button_save:670057:
  selectOutput("Export scene as...", "exportWorldFile");
} //_CODE_:button_save:670057:

public void button_add_click(GButton source, GEvent event) { //_CODE_:button_add:421526:
  
} //_CODE_:button_add:421526:

public void object_list_change(GTextArea source, GEvent event) { //_CODE_:object_list:455220:
  
} //_CODE_:object_list:455220:

public void button_open_click(GButton source, GEvent event) { //_CODE_:button_open:379595:
  println("button_open - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button_open:379595:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Render Output");
  window_options = GWindow.getWindow(this, "Options", 0, 0, 400, 250, P2D);
  window_options.noLoop();
  window_options.setActionOnClose(G4P.EXIT_APP);
  window_options.addDrawHandler(this, "window_options_draw");
  label_objects = new GLabel(window_options, 10, 10, 50, 20);
  label_objects.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label_objects.setText("Objects");
  label_objects.setOpaque(false);
  button_render = new GButton(window_options, 240, 210, 70, 30);
  button_render.setText("Render");
  button_render.addEventHandler(this, "button_render_click");
  button_export = new GButton(window_options, 320, 210, 70, 30);
  button_export.setText("... to Image");
  button_export.addEventHandler(this, "button_export_click");
  button_save = new GButton(window_options, 10, 210, 70, 30);
  button_save.setText("Save");
  button_save.addEventHandler(this, "button_save_click");
  button_add = new GButton(window_options, 300, 10, 90, 20);
  button_add.setText("Add object");
  button_add.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  button_add.addEventHandler(this, "button_add_click");
  object_list = new GTextArea(window_options, 10, 30, 380, 170, G4P.SCROLLBARS_NONE);
  object_list.setOpaque(false);
  object_list.addEventHandler(this, "object_list_change");
  button_open = new GButton(window_options, 90, 210, 70, 30);
  button_open.setText("Open");
  button_open.addEventHandler(this, "button_open_click");
  window_options.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window_options;
GLabel label_objects; 
GButton button_render; 
GButton button_export; 
GButton button_save; 
GButton button_add; 
GTextArea object_list; 
GButton button_open; 
